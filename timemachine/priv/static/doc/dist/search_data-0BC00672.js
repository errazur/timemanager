searchData={"items":[{"type":"module","title":"Timemachine.Data","doc":"The Data context for managing data operations in the Timemachine application.","ref":"Timemachine.Data.html"},{"type":"function","title":"Timemachine.Data.clock_create/2","doc":"Creates a clock entry for the given `user_id`.","ref":"Timemachine.Data.html#clock_create/2"},{"type":"function","title":"Parameters - Timemachine.Data.clock_create/2","doc":"- `attrs` (type: map, default: %{}): Map containing attributes for the clock entry. Should include `\"status\"` and `\"time\"`.\r\n- `user_id` (type: integer()): The user ID for whom the clock entry is created.","ref":"Timemachine.Data.html#clock_create/2-parameters"},{"type":"function","title":"Returns - Timemachine.Data.clock_create/2","doc":"Returns `:ok` if the clock entry is successfully created.","ref":"Timemachine.Data.html#clock_create/2-returns"},{"type":"function","title":"Timemachine.Data.clock_get_last_by_user_id/1","doc":"Returns the last clock entry made by the user with the given `user_id`.","ref":"Timemachine.Data.html#clock_get_last_by_user_id/1"},{"type":"function","title":"Parameters - Timemachine.Data.clock_get_last_by_user_id/1","doc":"- `user_id` (type: integer()): The user ID for whom the last clock entry is retrieved.","ref":"Timemachine.Data.html#clock_get_last_by_user_id/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.clock_get_last_by_user_id/1","doc":"Returns the last clock entry as a `%Clock{}` struct.","ref":"Timemachine.Data.html#clock_get_last_by_user_id/1-returns"},{"type":"function","title":"Timemachine.Data.clock_list_by_user_id/1","doc":"Returns all clock entries made by the user with the given `user_id`.","ref":"Timemachine.Data.html#clock_list_by_user_id/1"},{"type":"function","title":"Parameters - Timemachine.Data.clock_list_by_user_id/1","doc":"- `user_id` (type: integer()): The user ID for whom the clock entries are retrieved.","ref":"Timemachine.Data.html#clock_list_by_user_id/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.clock_list_by_user_id/1","doc":"Returns a list of clock entries as `%Clock{}` structs.","ref":"Timemachine.Data.html#clock_list_by_user_id/1-returns"},{"type":"function","title":"Timemachine.Data.team_create/1","doc":"Creates a new team.","ref":"Timemachine.Data.html#team_create/1"},{"type":"function","title":"Parameters - Timemachine.Data.team_create/1","doc":"- `attrs` (type: map, default: %{}): Map containing attributes for the team. Should include `\"name\"`.","ref":"Timemachine.Data.html#team_create/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.team_create/1","doc":"Returns `:ok` if the team is successfully created.","ref":"Timemachine.Data.html#team_create/1-returns"},{"type":"function","title":"Timemachine.Data.team_delete/1","doc":"Deletes the given team.","ref":"Timemachine.Data.html#team_delete/1"},{"type":"function","title":"Parameters - Timemachine.Data.team_delete/1","doc":"- `team` (type: %Team{}): The team to be deleted.","ref":"Timemachine.Data.html#team_delete/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.team_delete/1","doc":"Returns `:ok` if the team is successfully deleted.","ref":"Timemachine.Data.html#team_delete/1-returns"},{"type":"function","title":"Timemachine.Data.team_get/1","doc":"Returns the team with the same `id`.","ref":"Timemachine.Data.html#team_get/1"},{"type":"function","title":"Parameters - Timemachine.Data.team_get/1","doc":"- `id` (type: any()): The ID of the team to be retrieved.","ref":"Timemachine.Data.html#team_get/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.team_get/1","doc":"Returns the team as a `%Team{}` struct.","ref":"Timemachine.Data.html#team_get/1-returns"},{"type":"function","title":"Timemachine.Data.team_list/0","doc":"Returns all teams.","ref":"Timemachine.Data.html#team_list/0"},{"type":"function","title":"Returns - Timemachine.Data.team_list/0","doc":"Returns a list of teams as `%Team{}` structs.","ref":"Timemachine.Data.html#team_list/0-returns"},{"type":"function","title":"Timemachine.Data.team_update/2","doc":"Edits the team with the given `attrs`.","ref":"Timemachine.Data.html#team_update/2"},{"type":"function","title":"Parameters - Timemachine.Data.team_update/2","doc":"- `team` (type: %Team{}): The team to be updated.\r\n- `attrs` (type: map()): Map containing attributes for the team. Can include `\"name\"`.","ref":"Timemachine.Data.html#team_update/2-parameters"},{"type":"function","title":"Returns - Timemachine.Data.team_update/2","doc":"Returns `:ok` if the team is successfully updated.","ref":"Timemachine.Data.html#team_update/2-returns"},{"type":"function","title":"Timemachine.Data.user_create/1","doc":"Creates a new user.","ref":"Timemachine.Data.html#user_create/1"},{"type":"function","title":"Parameters - Timemachine.Data.user_create/1","doc":"- `attrs` (type: map()): Map containing user attributes, including `\"username\"`, `\"email\"`, `\"password\"`, and an optional `\"role\"`.","ref":"Timemachine.Data.html#user_create/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.user_create/1","doc":"Returns the newly created user, preloaded with associated teams.","ref":"Timemachine.Data.html#user_create/1-returns"},{"type":"function","title":"Timemachine.Data.user_delete/1","doc":"Deletes the given user.","ref":"Timemachine.Data.html#user_delete/1"},{"type":"function","title":"Parameters - Timemachine.Data.user_delete/1","doc":"- `user` (type: %User{}): The user to be deleted.","ref":"Timemachine.Data.html#user_delete/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.user_delete/1","doc":"Returns `:ok` if the user is successfully deleted.","ref":"Timemachine.Data.html#user_delete/1-returns"},{"type":"function","title":"Timemachine.Data.user_get/1","doc":"Returns the team with the same `id`.","ref":"Timemachine.Data.html#user_get/1"},{"type":"function","title":"Parameters - Timemachine.Data.user_get/1","doc":"- `id` (type: any()): The ID of the user to be retrieved.","ref":"Timemachine.Data.html#user_get/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.user_get/1","doc":"Returns the user as a `%User{}` struct.","ref":"Timemachine.Data.html#user_get/1-returns"},{"type":"function","title":"Timemachine.Data.user_search/1","doc":"Searches for users based on the specified parameters.","ref":"Timemachine.Data.html#user_search/1"},{"type":"function","title":"Parameters - Timemachine.Data.user_search/1","doc":"- `params` (type: map()): Map containing search parameters. Can include `\"username\"` and `\"email\"`.","ref":"Timemachine.Data.html#user_search/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.user_search/1","doc":"Returns a list of users as `%User{}` structs.","ref":"Timemachine.Data.html#user_search/1-returns"},{"type":"function","title":"Timemachine.Data.user_try_login/1","doc":"Tries to authenticate the user.","ref":"Timemachine.Data.html#user_try_login/1"},{"type":"function","title":"Parameters - Timemachine.Data.user_try_login/1","doc":"- `credentials` (type: map()): Map containing credentials with keys `\"username\"` and `\"password\"`.","ref":"Timemachine.Data.html#user_try_login/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.user_try_login/1","doc":"Returns `{:ok, user}` if authentication is successful, or `{:error, 401}` if not.","ref":"Timemachine.Data.html#user_try_login/1-returns"},{"type":"function","title":"Timemachine.Data.user_try_login/2","doc":"Tries to authenticate the user.","ref":"Timemachine.Data.html#user_try_login/2"},{"type":"function","title":"Parameters - Timemachine.Data.user_try_login/2","doc":"- `user_id` (type: any()): The ID of the user.\r\n- `password` (type: string()): The user's password.","ref":"Timemachine.Data.html#user_try_login/2-parameters"},{"type":"function","title":"Returns - Timemachine.Data.user_try_login/2","doc":"Returns `{:ok, user}` if authentication is successful, or `{:error, 401}` if not.","ref":"Timemachine.Data.html#user_try_login/2-returns"},{"type":"function","title":"Timemachine.Data.user_update/2","doc":"Updates the user's information.","ref":"Timemachine.Data.html#user_update/2"},{"type":"function","title":"Parameters - Timemachine.Data.user_update/2","doc":"- `user` (type: %User{}): The user to be updated.\r\n- `attrs` (type: map()): Map containing attributes to be updated.","ref":"Timemachine.Data.html#user_update/2-parameters"},{"type":"function","title":"Returns - Timemachine.Data.user_update/2","doc":"Returns `:ok` if the user is successfully updated.","ref":"Timemachine.Data.html#user_update/2-returns"},{"type":"function","title":"Timemachine.Data.userteam_create/2","doc":"Creates a new user-team relationship.","ref":"Timemachine.Data.html#userteam_create/2"},{"type":"function","title":"Parameters - Timemachine.Data.userteam_create/2","doc":"- `user_id` (type: any()): The ID of the user.\r\n- `team_id` (type: any()): The ID of the team.","ref":"Timemachine.Data.html#userteam_create/2-parameters"},{"type":"function","title":"Returns - Timemachine.Data.userteam_create/2","doc":"Returns `:ok` if the user-team relationship is successfully created.","ref":"Timemachine.Data.html#userteam_create/2-returns"},{"type":"function","title":"Timemachine.Data.userteam_delete/2","doc":"Deletes an existing user-team relationship.","ref":"Timemachine.Data.html#userteam_delete/2"},{"type":"function","title":"Parameters - Timemachine.Data.userteam_delete/2","doc":"- `user_id` (type: any()): The ID of the user.\r\n- `team_id` (type: any()): The ID of the team.","ref":"Timemachine.Data.html#userteam_delete/2-parameters"},{"type":"function","title":"Returns - Timemachine.Data.userteam_delete/2","doc":"Returns `:ok` if the user-team relationship is successfully deleted.","ref":"Timemachine.Data.html#userteam_delete/2-returns"},{"type":"function","title":"Timemachine.Data.workingtime_create/2","doc":"Creates a new working time entry.","ref":"Timemachine.Data.html#workingtime_create/2"},{"type":"function","title":"Parameters - Timemachine.Data.workingtime_create/2","doc":"- `attrs` (type: map, default: %{}): Map containing attributes for the working time. Should include `\"start\"` and `\"end\"`.\r\n- `user_id` (type: any()): The ID of the user.","ref":"Timemachine.Data.html#workingtime_create/2-parameters"},{"type":"function","title":"Returns - Timemachine.Data.workingtime_create/2","doc":"Returns `:ok` if the working time entry is successfully created.","ref":"Timemachine.Data.html#workingtime_create/2-returns"},{"type":"function","title":"Timemachine.Data.workingtime_delete/1","doc":"Deletes an existing working time entry.","ref":"Timemachine.Data.html#workingtime_delete/1"},{"type":"function","title":"Parameters - Timemachine.Data.workingtime_delete/1","doc":"- `workingtime` (type: %Workingtime{}): The working time entry to be deleted.","ref":"Timemachine.Data.html#workingtime_delete/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.workingtime_delete/1","doc":"Returns `:ok` if the working time entry is successfully deleted.","ref":"Timemachine.Data.html#workingtime_delete/1-returns"},{"type":"function","title":"Timemachine.Data.workingtime_generate/2","doc":"Generates a new working time entry based on the last clock entry.","ref":"Timemachine.Data.html#workingtime_generate/2"},{"type":"function","title":"Parameters - Timemachine.Data.workingtime_generate/2","doc":"- `user_id` (type: any()): The ID of the user.\r\n- `end_time` (type: any()): The end time of the working time.","ref":"Timemachine.Data.html#workingtime_generate/2-parameters"},{"type":"function","title":"Returns - Timemachine.Data.workingtime_generate/2","doc":"Returns `:ok` if the working time entry is successfully generated.","ref":"Timemachine.Data.html#workingtime_generate/2-returns"},{"type":"function","title":"Timemachine.Data.workingtime_get/1","doc":"Returns the working time entry with the same `id`.","ref":"Timemachine.Data.html#workingtime_get/1"},{"type":"function","title":"Parameters - Timemachine.Data.workingtime_get/1","doc":"- `id` (type: any()): The ID of the working time entry.","ref":"Timemachine.Data.html#workingtime_get/1-parameters"},{"type":"function","title":"Returns - Timemachine.Data.workingtime_get/1","doc":"Returns the working time entry as a `%Workingtime{}` struct.","ref":"Timemachine.Data.html#workingtime_get/1-returns"},{"type":"function","title":"Timemachine.Data.workingtime_list/0","doc":"Returns a list of all working time entries.","ref":"Timemachine.Data.html#workingtime_list/0"},{"type":"function","title":"Returns - Timemachine.Data.workingtime_list/0","doc":"Returns a list of working time entries as `%Workingtime{}` structs.","ref":"Timemachine.Data.html#workingtime_list/0-returns"},{"type":"function","title":"Timemachine.Data.workingtime_search/3","doc":"Searches for working time entries within a specified time range.","ref":"Timemachine.Data.html#workingtime_search/3"},{"type":"function","title":"Parameters - Timemachine.Data.workingtime_search/3","doc":"- `user_id` (type: any()): The ID of the user.\r\n- `start_working` (type: any()): The start of the time range for the working time entries.\r\n- `end_working` (type: any()): The end of the time range for the working time entries.","ref":"Timemachine.Data.html#workingtime_search/3-parameters"},{"type":"function","title":"Returns - Timemachine.Data.workingtime_search/3","doc":"Returns a list of working time entries within the specified time range.","ref":"Timemachine.Data.html#workingtime_search/3-returns"},{"type":"function","title":"Timemachine.Data.workingtime_update/2","doc":"Updates an existing working time entry.","ref":"Timemachine.Data.html#workingtime_update/2"},{"type":"function","title":"Parameters - Timemachine.Data.workingtime_update/2","doc":"- `workingtime` (type: %Workingtime{}): The working time entry to be updated.\r\n- `attrs` (type: map()): Map containing attributes to be updated.","ref":"Timemachine.Data.html#workingtime_update/2-parameters"},{"type":"function","title":"Returns - Timemachine.Data.workingtime_update/2","doc":"Returns `:ok` if the working time entry is successfully updated.","ref":"Timemachine.Data.html#workingtime_update/2-returns"},{"type":"module","title":"Timemachine.Data.Clock","doc":"","ref":"Timemachine.Data.Clock.html"},{"type":"function","title":"Timemachine.Data.Clock.__struct__/0","doc":"Defines the schema for the 'clocks' table, representing clock entries in the Timemachine application.","ref":"Timemachine.Data.Clock.html#__struct__/0"},{"type":"function","title":"Fields - Timemachine.Data.Clock.__struct__/0","doc":"- `:status` (type: boolean, default: false): The status of the clock entry.\r\n- `:time` (type: :utc_datetime): The timestamp of the clock entry.\r\n- `:user` (type: association): Belongs to a user through the `user_id` foreign key.\r\n- `timestamps` (type: :utc_datetime): Automatic timestamps for record creation and updates.","ref":"Timemachine.Data.Clock.html#__struct__/0-fields"},{"type":"module","title":"Timemachine.Data.Team","doc":"","ref":"Timemachine.Data.Team.html"},{"type":"function","title":"Timemachine.Data.Team.__struct__/0","doc":"Defines the schema for the 'teams' table, representing teams in the Timemachine application.","ref":"Timemachine.Data.Team.html#__struct__/0"},{"type":"function","title":"Fields - Timemachine.Data.Team.__struct__/0","doc":"- `:name` (type: string): Unique name for the team.\r\n- `:users` (type: association): Many-to-many association with users through the `UserTeam` join table.\r\n- `timestamps` (type: :utc_datetime): Automatic timestamps for record creation and updates.","ref":"Timemachine.Data.Team.html#__struct__/0-fields"},{"type":"module","title":"Timemachine.Data.User","doc":"","ref":"Timemachine.Data.User.html"},{"type":"function","title":"Timemachine.Data.User.__struct__/0","doc":"Defines the schema for the 'users' table, representing users in the Timemachine application.","ref":"Timemachine.Data.User.html#__struct__/0"},{"type":"function","title":"Fields - Timemachine.Data.User.__struct__/0","doc":"- `:username` (type: string): Unique username for the user.\r\n- `:email` (type: string): Unique email address for the user.\r\n- `:password_hash` (type: binary): Hashed password for the user.\r\n- `:role` (type: string, default: employee): Role of the user (one of employeemanageradmin).\r\n- `:teams` (type: association): Many-to-many association with teams through the `UserTeam` join table.\r\n- `timestamps` (type: :utc_datetime): Automatic timestamps for record creation and updates.","ref":"Timemachine.Data.User.html#__struct__/0-fields"},{"type":"function","title":"Default Role - Timemachine.Data.User.__struct__/0","doc":"When creating a user, the `:role` field uses the default value if no role is specified or the specified role does not exist.","ref":"Timemachine.Data.User.html#__struct__/0-default-role"},{"type":"function","title":"Timemachine.Data.User.default_role/0","doc":"","ref":"Timemachine.Data.User.html#default_role/0"},{"type":"module","title":"Timemachine.Data.UserTeam","doc":"","ref":"Timemachine.Data.UserTeam.html"},{"type":"function","title":"Timemachine.Data.UserTeam.__struct__/0","doc":"Defines the schema for the 'users_teams' table, representing the relationship between users and teams in the Timemachine application.","ref":"Timemachine.Data.UserTeam.html#__struct__/0"},{"type":"function","title":"Fields - Timemachine.Data.UserTeam.__struct__/0","doc":"- `:user` (type: association): Belongs to a user.\r\n- `:team` (type: association): Belongs to a team.\r\n- `timestamps` (type: :utc_datetime): Automatic timestamps for record creation and updates.","ref":"Timemachine.Data.UserTeam.html#__struct__/0-fields"},{"type":"module","title":"Timemachine.Data.Workingtime","doc":"","ref":"Timemachine.Data.Workingtime.html"},{"type":"function","title":"Timemachine.Data.Workingtime.__struct__/0","doc":"Defines the schema for the 'workingtimes' table, representing working times in the Timemachine application.","ref":"Timemachine.Data.Workingtime.html#__struct__/0"},{"type":"function","title":"Fields - Timemachine.Data.Workingtime.__struct__/0","doc":"- `:start` (type: :utc_datetime): Start time of the working time.\r\n- `:end` (type: :utc_datetime): End time of the working time.\r\n- `:user` (type: association): Belongs to a user through the `user_id` foreign key.\r\n- `timestamps` (type: :utc_datetime): Automatic timestamps for record creation and updates.","ref":"Timemachine.Data.Workingtime.html#__struct__/0-fields"},{"type":"module","title":"Timemachine.Tokens.Bearer","doc":"","ref":"Timemachine.Tokens.Bearer.html"},{"type":"function","title":"Timemachine.Tokens.Bearer.generate_and_sign/2","doc":"Combines `generate_claims/1` and `encode_and_sign/2`","ref":"Timemachine.Tokens.Bearer.html#generate_and_sign/2"},{"type":"function","title":"Timemachine.Tokens.Bearer.generate_and_sign!/2","doc":"Same as `generate_and_sign/2` but raises if error","ref":"Timemachine.Tokens.Bearer.html#generate_and_sign!/2"},{"type":"function","title":"Timemachine.Tokens.Bearer.get_current_user_id/1","doc":"Extracts the `id` of the current user from the bearer token.","ref":"Timemachine.Tokens.Bearer.html#get_current_user_id/1"},{"type":"function","title":"Parameters - Timemachine.Tokens.Bearer.get_current_user_id/1","doc":"- `conn` (type: Plug.Conn.t()): The Plug connection.","ref":"Timemachine.Tokens.Bearer.html#get_current_user_id/1-parameters"},{"type":"function","title":"Returns - Timemachine.Tokens.Bearer.get_current_user_id/1","doc":"Returns the `id` of the current user or `nil` if extraction fails.","ref":"Timemachine.Tokens.Bearer.html#get_current_user_id/1-returns"},{"type":"function","title":"Timemachine.Tokens.Bearer.get_from_conn/1","doc":"Retrieves the bearer token from a connection by reading the `authorization` header.","ref":"Timemachine.Tokens.Bearer.html#get_from_conn/1"},{"type":"function","title":"Parameters - Timemachine.Tokens.Bearer.get_from_conn/1","doc":"- `conn` (type: Plug.Conn.t()): The Plug connection.","ref":"Timemachine.Tokens.Bearer.html#get_from_conn/1-parameters"},{"type":"function","title":"Returns - Timemachine.Tokens.Bearer.get_from_conn/1","doc":"Returns a tuple `{:ok, token}` if the token is found, or `{:error, reason}` if not found.","ref":"Timemachine.Tokens.Bearer.html#get_from_conn/1-returns"},{"type":"function","title":"Timemachine.Tokens.Bearer.verify_and_validate/3","doc":"Combines `verify/2` and `validate/2`","ref":"Timemachine.Tokens.Bearer.html#verify_and_validate/3"},{"type":"function","title":"Timemachine.Tokens.Bearer.verify_and_validate!/3","doc":"Same as `verify_and_validate/2` but raises if error","ref":"Timemachine.Tokens.Bearer.html#verify_and_validate!/3"},{"type":"module","title":"Timemachine.Tokens.CSRF","doc":"","ref":"Timemachine.Tokens.CSRF.html"},{"type":"function","title":"Timemachine.Tokens.CSRF.authorized?/2","doc":"Checks if the given CSRF token matches the stored one for this `user_id`.","ref":"Timemachine.Tokens.CSRF.html#authorized?/2"},{"type":"function","title":"Parameters - Timemachine.Tokens.CSRF.authorized?/2","doc":"- `user_id` (type: integer()): The user ID for whom the CSRF token is checked.\r\n- `csrf` (type: String.t()): The CSRF token to be checked.","ref":"Timemachine.Tokens.CSRF.html#authorized?/2-parameters"},{"type":"function","title":"Returns - Timemachine.Tokens.CSRF.authorized?/2","doc":"Returns `true` if the CSRF token matches the stored one, otherwise `false`.","ref":"Timemachine.Tokens.CSRF.html#authorized?/2-returns"},{"type":"function","title":"Timemachine.Tokens.CSRF.delete/1","doc":"Deletes the CSRF token stored for the given `user_id`.","ref":"Timemachine.Tokens.CSRF.html#delete/1"},{"type":"function","title":"Parameters - Timemachine.Tokens.CSRF.delete/1","doc":"- `user_id` (type: integer()): The user ID for whom the CSRF token is deleted.","ref":"Timemachine.Tokens.CSRF.html#delete/1-parameters"},{"type":"function","title":"Returns - Timemachine.Tokens.CSRF.delete/1","doc":"Returns `:ok` if the token is deleted successfully.","ref":"Timemachine.Tokens.CSRF.html#delete/1-returns"},{"type":"function","title":"Timemachine.Tokens.CSRF.generate/1","doc":"Generates a new CSRF token for the given `user_id`. Use `get(user_id)` to get the token.","ref":"Timemachine.Tokens.CSRF.html#generate/1"},{"type":"function","title":"Parameters - Timemachine.Tokens.CSRF.generate/1","doc":"- `user_id` (type: integer()): The user ID for whom the CSRF token is generated.","ref":"Timemachine.Tokens.CSRF.html#generate/1-parameters"},{"type":"function","title":"Returns - Timemachine.Tokens.CSRF.generate/1","doc":"Returns `:ok` if the token is generated successfully.","ref":"Timemachine.Tokens.CSRF.html#generate/1-returns"},{"type":"function","title":"Timemachine.Tokens.CSRF.get/1","doc":"Returns the CSRF token stored for the given `user_id`.","ref":"Timemachine.Tokens.CSRF.html#get/1"},{"type":"function","title":"Parameters - Timemachine.Tokens.CSRF.get/1","doc":"- `user_id` (type: integer()): The user ID for whom the CSRF token is retrieved.","ref":"Timemachine.Tokens.CSRF.html#get/1-parameters"},{"type":"function","title":"Returns - Timemachine.Tokens.CSRF.get/1","doc":"Returns the CSRF token as a string.","ref":"Timemachine.Tokens.CSRF.html#get/1-returns"},{"type":"function","title":"Timemachine.Tokens.CSRF.get_from_conn/1","doc":"Returns the CSRF token from a `conn` by reading `x-csrf-token` header.","ref":"Timemachine.Tokens.CSRF.html#get_from_conn/1"},{"type":"function","title":"Parameters - Timemachine.Tokens.CSRF.get_from_conn/1","doc":"- `conn` (type: Plug.Conn.t()): The Plug connection.","ref":"Timemachine.Tokens.CSRF.html#get_from_conn/1-parameters"},{"type":"function","title":"Returns - Timemachine.Tokens.CSRF.get_from_conn/1","doc":"Returns a tuple `{:ok, csrf}` if the CSRF token is found, or `{:error, reason}` if not found.","ref":"Timemachine.Tokens.CSRF.html#get_from_conn/1-returns"},{"type":"module","title":"TimemachineWeb.ClockController","doc":"Controller for managing clock data.","ref":"TimemachineWeb.ClockController.html"},{"type":"module","title":"Actions - TimemachineWeb.ClockController","doc":"- `index(conn, %{\"user_id\" => user_id})`: Retrieve a list of clocks for a specific user.\r\n- `create(conn, %{\"clock\" => clock_params, \"user_id\" => user_id})`: Create a new clock entry for a user.\r\n- `get_by_team(conn, %{\"team_id\" => team_id})`: Retrieve a list of clocks for all users in a team.\r\n- `create_for_team(conn, %{\"clock\" => clock_params, \"team_id\" => team_id})`: Create a new clock entry for all users in a team.","ref":"TimemachineWeb.ClockController.html#module-actions"},{"type":"function","title":"TimemachineWeb.ClockController.create/2","doc":"Create a new clock entry for a user.","ref":"TimemachineWeb.ClockController.html#create/2"},{"type":"function","title":"Parameters - TimemachineWeb.ClockController.create/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"clock\"` and `\"user_id\"`.","ref":"TimemachineWeb.ClockController.html#create/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.ClockController.create/2","doc":"Renders the `:show` view with the details of the created clock entry.","ref":"TimemachineWeb.ClockController.html#create/2-returns"},{"type":"function","title":"TimemachineWeb.ClockController.create_for_team/2","doc":"Create a new clock entry for all users in a team.","ref":"TimemachineWeb.ClockController.html#create_for_team/2"},{"type":"function","title":"Parameters - TimemachineWeb.ClockController.create_for_team/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"clock\"` and `\"team_id\"`.","ref":"TimemachineWeb.ClockController.html#create_for_team/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.ClockController.create_for_team/2","doc":"Responds with a `:no_content` status.","ref":"TimemachineWeb.ClockController.html#create_for_team/2-returns"},{"type":"function","title":"TimemachineWeb.ClockController.get_by_team/2","doc":"Retrieve a list of clocks for all users in a team.","ref":"TimemachineWeb.ClockController.html#get_by_team/2"},{"type":"function","title":"Parameters - TimemachineWeb.ClockController.get_by_team/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"team_id\"`.","ref":"TimemachineWeb.ClockController.html#get_by_team/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.ClockController.get_by_team/2","doc":"Renders the `:index` view with a list of clocks for all users in the specified team.","ref":"TimemachineWeb.ClockController.html#get_by_team/2-returns"},{"type":"function","title":"TimemachineWeb.ClockController.index/2","doc":"Retrieve a list of clocks for a specific user.","ref":"TimemachineWeb.ClockController.html#index/2"},{"type":"function","title":"Parameters - TimemachineWeb.ClockController.index/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"user_id\"`.","ref":"TimemachineWeb.ClockController.html#index/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.ClockController.index/2","doc":"Renders the `:index` view with a list of clocks for the specified user.","ref":"TimemachineWeb.ClockController.html#index/2-returns"},{"type":"module","title":"TimemachineWeb.Plugs.BearerValidate","doc":"Plug for Bearer token validation.","ref":"TimemachineWeb.Plugs.BearerValidate.html"},{"type":"module","title":"Description - TimemachineWeb.Plugs.BearerValidate","doc":"This plug is responsible for authenticating requests using Bearer tokens. It checks the presence of a Bearer token in the request and verifies its validity. If the token is invalid or missing, it falls back to the `FallbackController` with a 401 Unauthorized error.","ref":"TimemachineWeb.Plugs.BearerValidate.html#module-description"},{"type":"module","title":"Usage - TimemachineWeb.Plugs.BearerValidate","doc":"Add this plug to your pipeline in the router or controller to enforce Bearer token validation.\r\n\r\n```elixir\r\npipeline :api do\r\n  plug TimemachineWeb.Plugs.BearerValidate\r\n  # ... other plugs and middleware\r\nend\r\n```","ref":"TimemachineWeb.Plugs.BearerValidate.html#module-usage"},{"type":"function","title":"TimemachineWeb.Plugs.BearerValidate.call/2","doc":"Call function for the BearerValidate plug.","ref":"TimemachineWeb.Plugs.BearerValidate.html#call/2"},{"type":"function","title":"Parameters - TimemachineWeb.Plugs.BearerValidate.call/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `_default` (type: term()): The default value.","ref":"TimemachineWeb.Plugs.BearerValidate.html#call/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.Plugs.BearerValidate.call/2","doc":"If the Bearer token is valid, the connection is returned. If the token is invalid or missing, it falls back to the `FallbackController` with a 401 Unauthorized error.","ref":"TimemachineWeb.Plugs.BearerValidate.html#call/2-returns"},{"type":"function","title":"TimemachineWeb.Plugs.BearerValidate.init/1","doc":"","ref":"TimemachineWeb.Plugs.BearerValidate.html#init/1"},{"type":"module","title":"TimemachineWeb.Plugs.CSRFValidate","doc":"Plug for CSRF token validation.","ref":"TimemachineWeb.Plugs.CSRFValidate.html"},{"type":"module","title":"Description - TimemachineWeb.Plugs.CSRFValidate","doc":"This plug is responsible for validating CSRF tokens for POST, PUT, and DELETE requests. It checks the presence of a CSRF token in the request and verifies its validity. If the token is invalid or missing, it falls back to the `FallbackController` with a 401 Unauthorized error. If the token is present but not authorized for the current user, it falls back with a 403 Forbidden error.","ref":"TimemachineWeb.Plugs.CSRFValidate.html#module-description"},{"type":"module","title":"Usage - TimemachineWeb.Plugs.CSRFValidate","doc":"Add this plug to your pipeline in the router or controller to enforce CSRF token validation.\r\n\r\n```elixir\r\npipeline :api do\r\n  plug TimemachineWeb.Plugs.CSRFValidate\r\n  # ... other plugs and middleware\r\nend\r\n```","ref":"TimemachineWeb.Plugs.CSRFValidate.html#module-usage"},{"type":"function","title":"TimemachineWeb.Plugs.CSRFValidate.call/2","doc":"Call function for the CSRFValidate plug.","ref":"TimemachineWeb.Plugs.CSRFValidate.html#call/2"},{"type":"function","title":"Parameters - TimemachineWeb.Plugs.CSRFValidate.call/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `_default` (type: term()): The default value.","ref":"TimemachineWeb.Plugs.CSRFValidate.html#call/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.Plugs.CSRFValidate.call/2","doc":"If the CSRF token is valid, the connection is returned. If the token is invalid or missing, it falls back to the `FallbackController` with a 401 Unauthorized error. If the token is present but not authorized for the current user, it falls back with a 403 Forbidden error.","ref":"TimemachineWeb.Plugs.CSRFValidate.html#call/2-returns"},{"type":"function","title":"TimemachineWeb.Plugs.CSRFValidate.init/1","doc":"","ref":"TimemachineWeb.Plugs.CSRFValidate.html#init/1"},{"type":"module","title":"TimemachineWeb.Router","doc":"The main router for TimemachineWeb, responsible for handling browser, API, and authenticated requests.","ref":"TimemachineWeb.Router.html"},{"type":"module","title":"Pipelines - TimemachineWeb.Router","doc":"- `:browser`: Handles browser requests.\r\n- `:api`: Handles API requests.\r\n- `:auth`: Handles authenticated requests.","ref":"TimemachineWeb.Router.html#module-pipelines"},{"type":"module","title":"Public Routes - TimemachineWeb.Router","doc":"- `GET /api/users`: Search for users. Parameters: `?email=XXX&username=YYY`.\r\n- `GET /api/users/:id`: Get details of a specific user.\r\n- `POST /api/login`: User login.","ref":"TimemachineWeb.Router.html#module-public-routes"},{"type":"module","title":"Protected Routes - TimemachineWeb.Router","doc":"Requires both `:api` and `:auth` pipelines.\r\n\r\n#","ref":"TimemachineWeb.Router.html#module-protected-routes"},{"type":"module","title":"Miscellaneous - TimemachineWeb.Router","doc":"- `GET /api/tokens`: Get user tokens.\r\n\r\n#","ref":"TimemachineWeb.Router.html#module-miscellaneous"},{"type":"module","title":"Users - TimemachineWeb.Router","doc":"- `PUT /api/users/password/:id`: Update user password.\r\n- `POST /api/users`: Create a new user.\r\n- `PUT /api/users/:id`: Update user details.\r\n- `DELETE /api/users/:id`: Delete a user.\r\n\r\n#","ref":"TimemachineWeb.Router.html#module-users"},{"type":"module","title":"Clocks - TimemachineWeb.Router","doc":"- `GET /api/clocks/teams/:team_id`: Get clocks by team.\r\n- `POST /api/clocks/teams/:team_id`: Create a clock for a team.\r\n- `GET /api/clocks/:user_id`: Get clocks by user.\r\n- `POST /api/clocks/:user_id`: Create a clock for a user.\r\n\r\n#","ref":"TimemachineWeb.Router.html#module-clocks"},{"type":"module","title":"Working Times - TimemachineWeb.Router","doc":"- `GET /api/workingtimes/teams/:team_id`: Get working times by team.\r\n- `POST /api/workingtimes/teams/:team_id`: Create a working time for a team.\r\n- `GET /api/workingtimes/:user_id`: Get working times by user.\r\n- `GET /api/workingtimes/:user_id/:id`: Get details of a specific working time.\r\n- `POST /api/workingtimes/:user_id`: Create a working time for a user.\r\n- `PUT /api/workingtimes/:id`: Update working time.\r\n- `DELETE /api/workingtimes/:id`: Delete working time.\r\n\r\n#","ref":"TimemachineWeb.Router.html#module-working-times"},{"type":"module","title":"Teams - TimemachineWeb.Router","doc":"- `GET /api/teams`: Get all teams.\r\n- `GET /api/teams/:id`: Get details of a specific team.\r\n- `POST /api/teams`: Create a new team.\r\n- `PUT /api/teams/:id`: Update team details.\r\n- `DELETE /api/teams/:id`: Delete a team.\r\n\r\n#","ref":"TimemachineWeb.Router.html#module-teams"},{"type":"module","title":"Users Teams - TimemachineWeb.Router","doc":"- `POST /api/users/:user_id/teams/:team_id`: Add a user to a team.\r\n- `DELETE /api/users/:user_id/teams/:team_id`: Remove a user from a team.","ref":"TimemachineWeb.Router.html#module-users-teams"},{"type":"function","title":"TimemachineWeb.Router.api/2","doc":"","ref":"TimemachineWeb.Router.html#api/2"},{"type":"function","title":"TimemachineWeb.Router.auth/2","doc":"","ref":"TimemachineWeb.Router.html#auth/2"},{"type":"function","title":"TimemachineWeb.Router.browser/2","doc":"","ref":"TimemachineWeb.Router.html#browser/2"},{"type":"function","title":"TimemachineWeb.Router.call/2","doc":"Callback invoked by Plug on every request.","ref":"TimemachineWeb.Router.html#call/2"},{"type":"function","title":"TimemachineWeb.Router.init/1","doc":"Callback required by Plug that initializes the router\nfor serving web requests.","ref":"TimemachineWeb.Router.html#init/1"},{"type":"module","title":"TimemachineWeb.TeamController","doc":"Controller for managing team data.","ref":"TimemachineWeb.TeamController.html"},{"type":"module","title":"Actions - TimemachineWeb.TeamController","doc":"- `index(conn, _params)`: Retrieve a list of all teams.\r\n- `create(conn, %{\"team\" => team_params})`: Create a new team.\r\n- `show(conn, %{\"id\" => id})`: Retrieve details of a specific team.\r\n- `update(conn, %{\"id\" => id, \"team\" => team_params})`: Update details of a specific team.\r\n- `delete(conn, %{\"id\" => id})`: Delete a specific team.","ref":"TimemachineWeb.TeamController.html#module-actions"},{"type":"function","title":"TimemachineWeb.TeamController.create/2","doc":"Create a new team.","ref":"TimemachineWeb.TeamController.html#create/2"},{"type":"function","title":"Parameters - TimemachineWeb.TeamController.create/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"team\"`.","ref":"TimemachineWeb.TeamController.html#create/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.TeamController.create/2","doc":"Renders the `:show` view with the details of the created team.","ref":"TimemachineWeb.TeamController.html#create/2-returns"},{"type":"function","title":"TimemachineWeb.TeamController.delete/2","doc":"Delete a specific team.","ref":"TimemachineWeb.TeamController.html#delete/2"},{"type":"function","title":"Parameters - TimemachineWeb.TeamController.delete/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"`.","ref":"TimemachineWeb.TeamController.html#delete/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.TeamController.delete/2","doc":"Responds with a `:no_content` status.","ref":"TimemachineWeb.TeamController.html#delete/2-returns"},{"type":"function","title":"TimemachineWeb.TeamController.index/2","doc":"Retrieve a list of all teams.","ref":"TimemachineWeb.TeamController.html#index/2"},{"type":"function","title":"Parameters - TimemachineWeb.TeamController.index/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters (not used).","ref":"TimemachineWeb.TeamController.html#index/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.TeamController.index/2","doc":"Renders the `:index` view with a list of all teams.","ref":"TimemachineWeb.TeamController.html#index/2-returns"},{"type":"function","title":"TimemachineWeb.TeamController.show/2","doc":"Retrieve details of a specific team.","ref":"TimemachineWeb.TeamController.html#show/2"},{"type":"function","title":"Parameters - TimemachineWeb.TeamController.show/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"`.","ref":"TimemachineWeb.TeamController.html#show/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.TeamController.show/2","doc":"Renders the `:show` view with details of the specified team.","ref":"TimemachineWeb.TeamController.html#show/2-returns"},{"type":"function","title":"TimemachineWeb.TeamController.update/2","doc":"Update details of a specific team.","ref":"TimemachineWeb.TeamController.html#update/2"},{"type":"function","title":"Parameters - TimemachineWeb.TeamController.update/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"` and `\"team\"`.","ref":"TimemachineWeb.TeamController.html#update/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.TeamController.update/2","doc":"Renders the `:show` view with the updated details of the team.","ref":"TimemachineWeb.TeamController.html#update/2-returns"},{"type":"module","title":"TimemachineWeb.UserController","doc":"Controller for managing user data.","ref":"TimemachineWeb.UserController.html"},{"type":"module","title":"Actions - TimemachineWeb.UserController","doc":"- `search(conn, params)`: Search for users based on specified parameters.\r\n- `login(conn, %{\"credentials\" => credentials})`: Login using username and password, sends JWT and CSRF tokens.\r\n- `tokens(conn, _params)`: Send JWT and CSRF tokens for the current user.\r\n- `create(conn, %{\"user\" => user_params})`: Create a new user.\r\n- `show(conn, %{\"id\" => id})`: Retrieve details of a specific user.\r\n- `update(conn, %{\"id\" => id, \"user\" => user_params})`: Update details of a specific user.\r\n- `update_password(conn, %{\"id\" => id, \"password\" => password, \"new_password\" => new_password})`: Update user password.\r\n- `delete(conn, %{\"id\" => id})`: Delete a specific user.","ref":"TimemachineWeb.UserController.html#module-actions"},{"type":"module","title":"Helper Functions - TimemachineWeb.UserController","doc":"- `send_tokens(conn, user)`: Send JWT and CSRF tokens in the response headers.","ref":"TimemachineWeb.UserController.html#module-helper-functions"},{"type":"function","title":"TimemachineWeb.UserController.create/2","doc":"Create a new user.","ref":"TimemachineWeb.UserController.html#create/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserController.create/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"user\"`.","ref":"TimemachineWeb.UserController.html#create/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserController.create/2","doc":"Renders the `:show` view with the details of the created user.","ref":"TimemachineWeb.UserController.html#create/2-returns"},{"type":"function","title":"TimemachineWeb.UserController.delete/2","doc":"Delete a specific user.","ref":"TimemachineWeb.UserController.html#delete/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserController.delete/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"`.","ref":"TimemachineWeb.UserController.html#delete/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserController.delete/2","doc":"Responds with a `:no_content` status.","ref":"TimemachineWeb.UserController.html#delete/2-returns"},{"type":"function","title":"TimemachineWeb.UserController.login/2","doc":"Login using username and password, sends JWT and CSRF tokens.","ref":"TimemachineWeb.UserController.html#login/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserController.login/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"credentials\"`.","ref":"TimemachineWeb.UserController.html#login/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserController.login/2","doc":"Sends JWT and CSRF tokens in the response headers.","ref":"TimemachineWeb.UserController.html#login/2-returns"},{"type":"function","title":"TimemachineWeb.UserController.search/2","doc":"Search for users based on specified parameters.","ref":"TimemachineWeb.UserController.html#search/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserController.search/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing search parameters.","ref":"TimemachineWeb.UserController.html#search/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserController.search/2","doc":"Renders the `:search` view with a list of users based on search parameters.","ref":"TimemachineWeb.UserController.html#search/2-returns"},{"type":"function","title":"TimemachineWeb.UserController.show/2","doc":"Retrieve details of a specific user.","ref":"TimemachineWeb.UserController.html#show/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserController.show/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"`.","ref":"TimemachineWeb.UserController.html#show/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserController.show/2","doc":"Renders the `:show` view with details of the specified user.","ref":"TimemachineWeb.UserController.html#show/2-returns"},{"type":"function","title":"TimemachineWeb.UserController.tokens/2","doc":"Send JWT and CSRF tokens for the current user.","ref":"TimemachineWeb.UserController.html#tokens/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserController.tokens/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters (not used).","ref":"TimemachineWeb.UserController.html#tokens/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserController.tokens/2","doc":"Sends JWT and CSRF tokens in the response headers.","ref":"TimemachineWeb.UserController.html#tokens/2-returns"},{"type":"function","title":"TimemachineWeb.UserController.update/2","doc":"Update details of a specific user.","ref":"TimemachineWeb.UserController.html#update/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserController.update/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"` and `\"user\"`.","ref":"TimemachineWeb.UserController.html#update/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserController.update/2","doc":"Renders the `:show` view with the updated details of the user.","ref":"TimemachineWeb.UserController.html#update/2-returns"},{"type":"function","title":"TimemachineWeb.UserController.update_password/2","doc":"Update user password.","ref":"TimemachineWeb.UserController.html#update_password/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserController.update_password/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"`, `\"password\"`, and `\"new_password\"`.","ref":"TimemachineWeb.UserController.html#update_password/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserController.update_password/2","doc":"Sends JWT and CSRF tokens in the response headers.","ref":"TimemachineWeb.UserController.html#update_password/2-returns"},{"type":"module","title":"TimemachineWeb.UserTeamController","doc":"Controller for managing user-team associations.","ref":"TimemachineWeb.UserTeamController.html"},{"type":"module","title":"Actions - TimemachineWeb.UserTeamController","doc":"- `add(conn, %{\"user_id\" => user_id, \"team_id\" => team_id})`: Add a user to a team.\r\n- `remove(conn, %{\"user_id\" => user_id, \"team_id\" => team_id})`: Remove a user from a team.","ref":"TimemachineWeb.UserTeamController.html#module-actions"},{"type":"function","title":"TimemachineWeb.UserTeamController.add/2","doc":"Add a user to a team.","ref":"TimemachineWeb.UserTeamController.html#add/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserTeamController.add/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"user_id\"` and `\"team_id\"`.","ref":"TimemachineWeb.UserTeamController.html#add/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserTeamController.add/2","doc":"Responds with a `:no_content` status.","ref":"TimemachineWeb.UserTeamController.html#add/2-returns"},{"type":"function","title":"TimemachineWeb.UserTeamController.remove/2","doc":"Remove a user from a team.","ref":"TimemachineWeb.UserTeamController.html#remove/2"},{"type":"function","title":"Parameters - TimemachineWeb.UserTeamController.remove/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"user_id\"` and `\"team_id\"`.","ref":"TimemachineWeb.UserTeamController.html#remove/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.UserTeamController.remove/2","doc":"Responds with a `:no_content` status.","ref":"TimemachineWeb.UserTeamController.html#remove/2-returns"},{"type":"module","title":"TimemachineWeb.WorkingtimeController","doc":"Controller for managing working times.","ref":"TimemachineWeb.WorkingtimeController.html"},{"type":"module","title":"Actions - TimemachineWeb.WorkingtimeController","doc":"- `index(conn, params)`: Get a list of working times based on user_id, start_time, and end_time.\r\n- `create(conn, %{\"user_id\" => user_id, \"workingtime\" => workingtime_params})`: Create a working time entry.\r\n- `show(conn, %{\"id\" => id, \"user_id\" => user_id})`: Show details of a working time entry.\r\n- `update(conn, %{\"id\" => id, \"workingtime\" => workingtime_params})`: Update a working time entry.\r\n- `delete(conn, %{\"id\" => id})`: Delete a working time entry.\r\n- `get_by_team(conn, params)`: Get a list of working times for a team based on team_id, start_time, and end_time.\r\n- `create_for_team(conn, %{\"team_id\" => team_id, \"workingtime\" => workingtime_params})`: Create working time entries for a team.","ref":"TimemachineWeb.WorkingtimeController.html#module-actions"},{"type":"function","title":"TimemachineWeb.WorkingtimeController.create/2","doc":"Create a working time entry.","ref":"TimemachineWeb.WorkingtimeController.html#create/2"},{"type":"function","title":"Parameters - TimemachineWeb.WorkingtimeController.create/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"user_id\"` and `\"workingtime\"`.","ref":"TimemachineWeb.WorkingtimeController.html#create/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.WorkingtimeController.create/2","doc":"Responds with the created working time entry.","ref":"TimemachineWeb.WorkingtimeController.html#create/2-returns"},{"type":"function","title":"TimemachineWeb.WorkingtimeController.create_for_team/2","doc":"Create working time entries for a team.","ref":"TimemachineWeb.WorkingtimeController.html#create_for_team/2"},{"type":"function","title":"Parameters - TimemachineWeb.WorkingtimeController.create_for_team/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"team_id\"` and `\"workingtime\"`.","ref":"TimemachineWeb.WorkingtimeController.html#create_for_team/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.WorkingtimeController.create_for_team/2","doc":"Responds with a `:no_content` status.","ref":"TimemachineWeb.WorkingtimeController.html#create_for_team/2-returns"},{"type":"function","title":"TimemachineWeb.WorkingtimeController.delete/2","doc":"Delete a working time entry.","ref":"TimemachineWeb.WorkingtimeController.html#delete/2"},{"type":"function","title":"Parameters - TimemachineWeb.WorkingtimeController.delete/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"`.","ref":"TimemachineWeb.WorkingtimeController.html#delete/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.WorkingtimeController.delete/2","doc":"Responds with a `:no_content` status.","ref":"TimemachineWeb.WorkingtimeController.html#delete/2-returns"},{"type":"function","title":"TimemachineWeb.WorkingtimeController.get_by_team/2","doc":"Get a list of working times for a team based on team_id, start_time, and end_time.","ref":"TimemachineWeb.WorkingtimeController.html#get_by_team/2"},{"type":"function","title":"Parameters - TimemachineWeb.WorkingtimeController.get_by_team/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"team_id\"`, `\"start\"`, and `\"end\"`.","ref":"TimemachineWeb.WorkingtimeController.html#get_by_team/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.WorkingtimeController.get_by_team/2","doc":"Responds with a list of working times for the specified team.","ref":"TimemachineWeb.WorkingtimeController.html#get_by_team/2-returns"},{"type":"function","title":"TimemachineWeb.WorkingtimeController.index/2","doc":"Get a list of working times based on user_id, start_time, and end_time.","ref":"TimemachineWeb.WorkingtimeController.html#index/2"},{"type":"function","title":"Parameters - TimemachineWeb.WorkingtimeController.index/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"user_id\"`, `\"start\"`, and `\"end\"`.","ref":"TimemachineWeb.WorkingtimeController.html#index/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.WorkingtimeController.index/2","doc":"Responds with a list of working times.","ref":"TimemachineWeb.WorkingtimeController.html#index/2-returns"},{"type":"function","title":"TimemachineWeb.WorkingtimeController.show/2","doc":"Show details of a working time entry.","ref":"TimemachineWeb.WorkingtimeController.html#show/2"},{"type":"function","title":"Parameters - TimemachineWeb.WorkingtimeController.show/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"` and `\"user_id\"`.","ref":"TimemachineWeb.WorkingtimeController.html#show/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.WorkingtimeController.show/2","doc":"Responds with the details of the specified working time entry.","ref":"TimemachineWeb.WorkingtimeController.html#show/2-returns"},{"type":"function","title":"TimemachineWeb.WorkingtimeController.update/2","doc":"Update a working time entry.","ref":"TimemachineWeb.WorkingtimeController.html#update/2"},{"type":"function","title":"Parameters - TimemachineWeb.WorkingtimeController.update/2","doc":"- `conn` (type: Plug.Conn.t()): The connection struct.\r\n- `params` (type: map()): Map containing parameters, including `\"id\"` and `\"workingtime\"`.","ref":"TimemachineWeb.WorkingtimeController.html#update/2-parameters"},{"type":"function","title":"Returns - TimemachineWeb.WorkingtimeController.update/2","doc":"Responds with the updated working time entry.","ref":"TimemachineWeb.WorkingtimeController.html#update/2-returns"}],"content_type":"text/markdown"}